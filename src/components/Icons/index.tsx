// Generated by gulp icon - do not modify manually

import * as React from 'react'

const iconList = [
    'stage',
    'vue',
]

export interface IconProps {
    color?: string
    className?: string
    height?: number
    kind?: string
    onClick?: () => void
    preview?: boolean
    size?: number
    style?: any
    width?: number
    wrapperStyle?: any
}
export default class Icon extends React.Component<IconProps, {}> {

    static defaultProps = {
        className: '',
        color: '#000',
        size: 32
    }

    render() {
        const { kind, preview } = this.props
        return preview ? this.renderPreview() : this.renderIcon(kind || "")
    }

    renderPreview() {
        return (<div>{ iconList.map(kind => this.renderPreviewKind(kind)) }</div>)
    }

    renderIcon(kind: string) {
        const { wrapperStyle } = this.props
        if (wrapperStyle) {
            return (<div style={wrapperStyle}>{ this.getIcon(kind) }</div>)
        }
        return this.getIcon(kind)
    }

    renderPreviewKind(kind: string) {
        return (
            <div key={kind}>
                <h3>&lt;Icon kind="{kind}" /&gt;</h3>
                { this.renderIcon(kind) }
            </div>
        )
    }

    getIcon(kind: string) {
        const { color, height, onClick, size, style, width, className } = this.props

        switch (kind) {
            case ('stage'): return (<svg fill={color} height={height || size} width={width || size} onClick={onClick} style={style} className={className} viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg"><defs><style/></defs><path d="M520.747 401.398c53.132 0 102.778 14.92 144.982 40.82v-73.995H627.41l-12.277-16.39L825.193 64.12h59.635L676.39 342.465h15.087v117.618a279.001 279.001 0 0 1 25.643 22.672c50.258 50.259 81.357 119.693 81.357 196.365 0 76.673-31.1 146.108-81.357 196.368-50.267 50.257-119.693 81.355-196.373 81.355-76.683 0-146.109-31.098-196.376-81.355-50.257-50.26-81.348-119.695-81.348-196.368 0-76.672 31.09-146.106 81.348-196.365a279.35 279.35 0 0 1 20.304-18.397v-82.953l8.86 11.85h16.89v52.316c43.33-27.959 94.927-44.173 150.322-44.173zm84.398-62.907l200.322-274.37h-35.836L586.997 314.257l18.148 24.234zm-28.136-37.573L749.905 64.12h-35.25L560.067 278.298l16.942 22.62zm-26.948-35.978L695 64.121h-38.443L528.118 235.634l21.943 29.306zM139.244 64.121l227.181 303.376h228.272L367.516 64.12H139.244zm541.465 455.036c-40.934-40.945-97.5-66.277-159.962-66.277-62.464 0-119.028 25.332-159.964 66.277-40.935 40.945-66.268 97.5-66.268 159.962s25.333 119.02 66.268 159.963c40.936 40.945 97.5 66.26 159.964 66.26 62.462 0 119.028-25.315 159.962-66.26 40.936-40.944 66.27-97.5 66.27-159.963s-25.334-119.017-66.27-159.962z"/></svg>)
            case ('vue'): return (<svg xmlns="http://www.w3.org/2000/svg" fill={color} height={height || size} width={width || size} onClick={onClick} style={style} className={className} viewBox="0 0 400 400"><path d="M237.417 86.655l-30.226 52.352-30.225-52.352H76.311l130.88 226.69 130.88-226.69z" fill="#4dba87"/><path d="M237.417 86.655l-30.226 52.352-30.225-52.352h-48.303l78.528 136.014L285.72 86.655z" fill="#435466"/></svg>)
            default: return null
        }
    }
}
